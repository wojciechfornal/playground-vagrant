# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.

Vagrant::Config.run do |config|

  # beg Wojtek:
  # Example shared folder configuration:
  # - first parameter is the identifier of the folder
  # - second parameter is the location where folder will be mounted on guest machine
  # - third parameter is the host machine shared directory
  # config.vm.share_folder "temp", "/temp", "./temp"
  # end Wojtek:

end

Vagrant.configure(2) do |config|

  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  # ubuntu/trusty64 : Trusty Tahr (14.04LTS)
  config.vm.box = "ubuntu/trusty64"
  
  # beg Wojtek:
  # No need to provide config.vm.box_url, it will fetch the box from 
  # "https://vagrantcloud.com/ubuntu/boxes/trusty64"
  # end Wojtek:

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false
  
  # beg Wojtek:
  # Port range for auto-correction
  # config.vm.usable_port_range = (2200...2250)
  # end Wojtek:

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  # config.vm.network "forwarded_port", guest: 80, host: 8080, auto_correct: true, protocol: "tcp"

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.2.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"
  config.vm.network "public_network", ip: "192.168.1.200"
  
  # beg Wojtek:
  # We can have multiple networks assuming there is possibility to add another network interfaces.
  # By default the first NIC is/should be NAT as it is the base for port forwarding (22 => 2222) needed for Vagrant (and not only Vagrant) to connect to the box (ssh).
  # Default setup is pretty comfy.
  # end Wojtek:

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"
  
  # beg Wojtek:
  # MySQL data directory.
  config.vm.synced_folder "f:/_box_dev1/mysql", "/vagrant_mysql"
  # Site specific provisioning scripts (mysql data imports etc.)
  # Assuming there are some files already in that dir.
  # The box will pick them up and process during provisioning.
  config.vm.synced_folder "f:/_box_dev1/init", "/vagrant_init"
  # temp (software downloads etc.)
  config.vm.synced_folder "f:/_box_dev1/temp", "/vagrant_temp"
  # http server doument root
  config.vm.synced_folder "f:/_box_dev1/www", "/vagrant_www"
  # var (logs etc.)
  config.vm.synced_folder "f:/_box_dev1/var", "/vagrant_var"
  # work (it's good to have access to them from the box)
  config.vm.synced_folder "f:/_work", "/vagrant_work"
  # end Wojtek:

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = true
    # Customize the amount of memory on the VM:
	  vb.memory = "4096"
  end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Define a Vagrant Push strategy for pushing to Atlas. Other push strategies
  # such as FTP and Heroku are also available. See the documentation at
  # https://docs.vagrantup.com/v2/push/atlas.html for more information.
  # config.push.define "atlas" do |push|
  #   push.app = "YOUR_ATLAS_USERNAME/YOUR_APPLICATION_NAME"
  # end

  # Enable provisioning with a shell script. Additional provisioners such as
  # Puppet, Chef, Ansible, Salt, and Docker are also available. Please see the
  # documentation for more information about their specific syntax and use.
  # config.vm.provision "shell", inline: <<-SHELL
  #   sudo apt-get update
  #   sudo apt-get install -y apache2
  # SHELL
  # config.vm.provision "chef_solo", run_list: ["bookname"]
  # config.vm.provision "puppet"
  
  # beg: Wojtek
  # Such files will not be kept in sync (as opposed to synced folders).
  # Apache vhosts
  config.vm.provision "file", source: "./apache/000-default.conf", destination: "/tmp/000-default.conf"
  # Script run right after login
  config.vm.provision "file", source: "./linux/onlogin.sh", destination: "/tmp/onlogin.sh"
  config.vm.provision "file", source: "./linux/.profile", destination: "/tmp/.profile"
  config.vm.provision "file", source: "./linux/sudoers", destination: "/tmp/sudoers"
  config.vm.provision "file", source: "./nginx/default.conf", destination: "/tmp/nginx_default.conf"
  # end: Wojtek
  
  config.vm.provision "shell", path: "provision.sh"
  
end
